package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"comments/graph/model"
	"comments/internal/storage"
	"context"
	"fmt"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post model.PostInput) (*model.Post, error) {

	input := model.Post{
		Author:          post.Author,
		Header:          post.Header,
		Content:         post.Content,
		CommentsAllowed: post.CommentsAllowed,
	}

	if r.Posgres != nil {
		res, err := storage.SavePostToPostgres(r.Posgres, input)
		if err != nil {
			return nil, err
		}
		return res, nil
	}

	res, err := r.InMemoryStorage.Post.AddPost(input)
	if err != nil {
		return nil, err
	}
	return res, nil

}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, page *int, pageSize *int) ([]*model.Post, error) {

	// Проверки на ввод
	if page != nil && *page < 0 || pageSize != nil && *pageSize < 0 {
		return nil, fmt.Errorf("bad request")
	}

	// Вычисление левой и правой границ вывода (пагинация)
	var left, right int
	if page == nil || pageSize == nil {
		left = -1
	} else {
		left = (*page - 1) * *pageSize
		right = *pageSize
	}

	var found []model.Post
	var err error

	// Поиск постов
	if r.Posgres != nil {
		// Todo: написать функцию для постгрес
	} else {
		found, err = r.InMemoryStorage.Post.GetAllPosts(left, right)
		if err != nil {
			return nil, err
		}

	}

	// Запись постов в результат
	var result []*model.Post
	for _, p := range found {
		result = append(result, &p)
	}

	return result, nil

}

// GetPostByID is the resolver for the GetPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id *int) (*model.PostOutput, error) {

	var found model.Post
	var err error
	if r.Posgres != nil {
		found, err = storage.GetPostFromPostgresById(r.Posgres, id)
		if err != nil {
			return nil, err
		}
	} else {
		found, err = r.InMemoryStorage.Post.GetPostById(*id)
		if err != nil {
			return nil, err
		}
	}

	result := model.PostOutput{
		ID:              *id,
		Author:          found.Author,
		Header:          found.Header,
		Content:         found.Content,
		CommentsAllowed: found.CommentsAllowed,
		CreatedAt:       found.CreatedAt,
	}

	return &result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
