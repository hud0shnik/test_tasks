package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"comments/graph/model"
	"comments/internal/storage"
	"context"
	"fmt"
)

var MAX_CONTENT_LENGTH = 2000

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CommentIntput) (*model.Comment, error) {

	// Проверка вводимых параметров
	switch true {
	case len(input.Content) >= MAX_CONTENT_LENGTH:
		return nil, fmt.Errorf("too long content length")
	case len(input.Author) == 0:
		return nil, fmt.Errorf("no author")
	case input.Post < 1:
		return nil, fmt.Errorf("wrong post id")
	default:
	}

	if r.Posgres != nil {
		resutl, err := storage.SaveCommentToPostgres(r.Posgres, input)
		if err != nil {
			return nil, err
		}
		return &resutl, nil
	} else {
		result, err := r.InMemoryStorage.Comment.AddComment(input)
		if err != nil {
			return nil, err
		}
		return result, nil
	}
}

// GetAllCommentsByPost is the resolver for the GetAllCommentsByPost field.
func (r *queryResolver) GetAllCommentsByPost(ctx context.Context, id *int, page *int, pageSize *int) ([]*model.Comment, error) {

	// Проверки на ввод
	if page != nil && *page < 0 || pageSize != nil && *pageSize < 0 {
		return nil, fmt.Errorf("bad request")
	}

	// Вычисление левой и правой границ вывода (пагинация)
	var left, right int
	if page == nil || pageSize == nil {
		left = -1
	} else {
		left = (*page - 1) * *pageSize
		right = *pageSize
	}

	var found []*model.Comment
	var err error

	if r.Posgres != nil {
		found, err = storage.GetCommentsByPost(r.Posgres, *id, left, right)
		if err != nil {
			return nil, err
		}
		return found, err
	} else {
		found, err = r.InMemoryStorage.Comment.GetCommentsByPost(*id, left, right)
		if err != nil {
			return nil, err
		}
		return found, err
	}
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
